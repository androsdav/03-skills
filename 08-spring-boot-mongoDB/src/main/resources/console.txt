/******************************************* MongoDB console commands *******************************************/

/* start mongo shell */
mongo

/* checking service status */
sudo systemctl status mongodb

/* stop service */
sudo systemctl stop mongodb

/* start service */
sudo systemctl start mongodb

/* restart service */
sudo systemctl restart mongodb

/* disable automatic service start */
sudo systemctl disable mongodb

/* enable automatic service start */
sudo systemctl enable mongodb

/* connect to server and check work database */
mongo --eval 'db.runCommand({ connectionStatus: 1 })'

/* version mongoDB */
mongo --version

/******************************************* MongoDB Shell commands *******************************************/

/* view all available database*/
show dbs

/* show collections */
show collections

/* current database*/
db

/* statistics on the current database */
db.stats()

/* switches to database user_store*/
use user_store

/* insert one document to database */
db.users.insertOne({
    "name" : "Albert",
    "age" : 12,
    "pet" : {
        "type" : "dog",
        "name" : "wolf"
    },
    "languages" : ["english", "german", "spanish"]
})

/* insert many document */
db.users.insertMany([
    {
        "name" : "Amanda",
        "age" : 14,
        "pet" : {
            "type" : "cat",
            "name" : "puma"
        },
        "languages" : ["english", "ukrainian"]
    },
    {
        "name" : "Bob",
                "age" : 16,
                "pet" : {
                    "type" : "parrot",
                    "name" : "pirate"
                },
                "languages" : ["english", "ukrainian", "russian"]
    }
])

/* insert one or many document */
db.users.insert([
    {
        "name" : "Adam",
        "age" : 16,
        "pet" : {
            "type" : "cat",
            "name" : "jaguar"
        },
        "languages" : ["english", "ukrainian", "russian"]
    },
    {
        "name" : "Adolf",
                "age" : 22,
                "pet" : {
                    "type" : "parrot",
                    "name" : "pirate"
                },
                "languages" : ["german"]
    }
])

/* insert document from document */
document = ({
    "name" : "Helen",
    "age" : 32,
    "pet" : {
        "type" : "dog",
        "name" : "nick"
    },
    "languages" : ["german", "spanish"]
})

db.users.insert(document)

/* load documents from file */
load("/home/andrey/D/05 Project/03-skills/08-spring-boot-mongoDB/src/main/resources/users.js")

/* find all object from database */
db.users.find()

/* find all object from database */
db.users.find().pretty()

/******************************************* Filters *******************************************/
db.users.find({"name" : "Amanda"})
db.users.find({"age" : 16})
db.users.find({"pet.type" : "dog"})
db.users.find({"pet.name" : "puma"})
db.users.find({"age" : 16,  "languages" : "english"})
db.users.find({"languages" : "english"})
db.users.find({"languages" : ["english"]})
db.users.find({"languages" : ["english", "ukrainian", "russian"]})
db.users.find({"languages" : "english", "languages" : "ukrainian"})
db.users.find({"languages.0" : "english"})
db.users.find({"languages.0" : "english", "languages.2" : "spanish"})

/***************************************** Projection *****************************************/
db.users.find({"pet.type" : "dog"}, {"languages" : false})
db.users.find({}, {"languages" : false, "age" : false})
db.users.find({}, {"name" : true, "age" : true})

/******************************************** Sort ********************************************/
db.users.find({}, {"name" : true}).sort({"name" : 1})
db.users.find({}, {"name" : true, "age" : true}).sort({"age" : 1})

/*************************************** Limit / Skip / Ыщке *****************************************/
db.users.find({}, {"name" : true, "age" : true}).limit(10).sort({"age" : 1}).pretty()
db.users.find({}, {"name" : true, "age" : true}).limit(10).skip(4).sort({"age" : 1}).pretty()
db.users.find({}, {"name" : true, "age" : true}).sort({"age" : 1}).skip(4).limit(10).pretty()
db.users.findOne({"pet.type" : "dog"})

/*************************************** Param $natural *****************************************/
/* $natural sorting in the order in which elements were added */
db.users.find().sort({$natural : 1})

/*************************************** Param $slice *****************************************/
/* $slice it skip and limit, can work with arrays */
db.users.find({"name" : "Bob"}, {"languages" : {$slice : 3}}).pretty()
db.users.find({"name" : "Bob"}, {"languages" : {$slice : [0, 3]}}).pretty()
db.users.find({"name" : "Bob"}, {"languages" : {$slice : [1, 3]}}).pretty()

/*************************************** Cursor *****************************************/
/* result of function find() is cursor */
var cursor = db.users.find(); null;
while(cursor.hasNext()){
obj = cursor.next();
print(obj["name"], obj["age"]);
}

var cursor = db.users.find()
cursor.forEach(function(obj){
print(obj.name, obj.age);
})

var cursor = db.users.find(); null;
cursor.limit(5); null;
var index = 1; null;
cursor.forEach(function(obj){
print(index++, "> name:", obj.name, "; age:", obj.age, "; pet:", obj.pet.type);
})

var cursor = db.users.find(); null;
cursor.sort({name:-1}); null;
cursor.forEach(function(obj){
print(obj.name);
})

var cursor = db.users.find(); null;
cursor.skip(2); null;
cursor.forEach(function(obj){
print(obj.name);
})

var cursor = db.users.find(); null;
cursor.sort({name:1}).limit(3).skip(2); null;
cursor.forEach(function(obj){
print(obj.name);
})

/*********************************** count / distinct / group *************************************/
db.users.count()
db.users.find({"age" : 16}).count()
db.users.find({"pet.type" : "cat"}).count()
db.users.find({"languages" : "english"}).count()
db.users.find({"languages" : "english"}).skip(2).count(true)
db.users.distinct("name")
db.users.distinct("pet.type")

db.users.group ({
    key: {name : true},
    initial: {total : 0},
    reduce : function (curr, res){res.total += 1}
})

db.users.group ({
    key: {languages : true},
    initial: {total : 0},
    reduce : function (curr, res){res.total += 1}
})

/*********************************** Selection operators *************************************/
/* $eq (==) */
db.users.find({"age" : {$eq : 16}}).pretty()
/* $ne (!=) */
db.users.find({"age" : {$ne : 16}}).pretty()
/* $gt (>) */
db.users.find({"age" : {$gt : 16}}).pretty()
/* $lt (<) */
db.users.find({"age" : {$lt : 16}}).pretty()
/* $gte (>=) */
db.users.find({"age" : {$gte : 16}}).pretty()
/* $lte (<=) */
db.users.find({"age" : {$lte : 16}}).pretty()
/* $gt (>) and $lt (<) */
db.users.find({"age" : {$gt : 16, $lt : 30}}).pretty()
/* $in определяет массив значений, одно из которых должно иметь поле документа */
db.users.find({"age" : {$in : [12]}})
db.users.find({"age" : {$in : [12, 16]}})
/* $nin определяет массив значений, которые не должно иметь поле документа */
db.users.find({"age" : {$nin : [12]}})
db.users.find({"age" : {$nin : [12, 16]}})
db.users.find({"age" : {$nin : [12, 14, 16]}})

/*********************************** Logical operators *************************************/
/* $or: соединяет два условия, и документ должен соответствовать одному из этих условий */
db.users.find({$or : [{"name" : "Bob"}, {"languages" : "english"}]}).pretty()
db.users.find({$or : [{"name" : "Adolf"}, {"pet.name" : "nick"}]}).pretty()
db.users.find({"age" : 16, $or : [{"pet.type" : "cat"}, {"pet.name" : "puma"}]}).pretty()
db.users.find({"age" : {$gt: 16}, $or : [{"pet.type" : "cat"}, {"pet.name" : "puma"}]}).pretty()
/* $and: соединяет два условия, и документ должен соответствовать обоим условиям */
db.users.find({$and : [{"name" : "Adolf"}, {"age" : 16}]}).pretty()
db.users.find({$and : [{"pet.type" : "cat"}, {"pet.name" : "puma"}]}).pretty()
/* $not: документ должен НЕ соответствовать условию */
db.users.find({"age" : {$not : {$gt : 16}}}).pretty()
/* $nor: соединяет два условия, и документ должен НЕ соответстовать обоим условиям */
db.users.find({"age" : 16, $nor : [{"name" : "Bob"}, {"pet.type" : "cat"}]}).pretty()

/*********************************** Find to array *************************************/
/* $all: определяет набор значений, которые должны иметься в массиве */
db.users.find({languages: {$all : ["english", "german", "russian"]}}).pretty()
db.users.find({languages: {$all : ["english", "german"]}}).pretty()
db.users.find({languages: {$all : ["german"]}}).pretty()
/* $size: определяет количество элементов, которые должны быть в массиве */
db.users.find({languages: {$size: 1}}).pretty()
db.users.find({languages: {$size: 3}}).pretty()
/* $elemMatch: определяет условие, которым должны соответствовать элемены в массиве */


db.grades.insertMany([
    {
    student: "Tom",
        courses:[
            {name: "Java", grade: 5},
            {name: "MongoDB", grade: 4}]},
    {student: "Alice",
        courses:[
            {name: "C++", grade: 3},
            {name: "MongoDB", grade: 5}]}
])

/******************************************* JavaScript *******************************************/
fn = function() {
    return this.age == 16;
}
db.users.find(fn)
fn = function() {
    return this.age > 16;
}
db.users.find(fn)
fn = function() {
    return this.name == "Adolf";
}
db.users.find(fn)
function sqrt(n) {
    return n*n;
}
sqrt(5)

/******************************************* Regular *******************************************/;(
db.users.find({name:/A\w+/i})

